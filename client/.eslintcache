[{"/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/index.tsx":"1","/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/reportWebVitals.ts":"2","/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/App.tsx":"3","/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/components/Posts/Posts.tsx":"4","/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/components/Form/Form.tsx":"5","/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/components/Posts/Post/Post.tsx":"6","/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/styles.ts":"7","/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/components/Form/styles.ts":"8","/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/components/Posts/Post/styles.ts":"9","/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/components/Posts/styles.ts":"10","/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/utils/api/api-client.ts":"11"},{"size":680,"mtime":1609017193151,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1608822991171,"results":"14","hashOfConfig":"13"},{"size":1369,"mtime":1609073517171,"results":"15","hashOfConfig":"13"},{"size":1050,"mtime":1609028407792,"results":"16","hashOfConfig":"13"},{"size":4608,"mtime":1609072905726,"results":"17","hashOfConfig":"13"},{"size":3138,"mtime":1609073108158,"results":"18","hashOfConfig":"13"},{"size":506,"mtime":1609073681839,"results":"19","hashOfConfig":"13"},{"size":425,"mtime":1608832889693,"results":"20","hashOfConfig":"13"},{"size":962,"mtime":1609072661811,"results":"21","hashOfConfig":"13"},{"size":266,"mtime":1608832930996,"results":"22","hashOfConfig":"13"},{"size":1556,"mtime":1609027108730,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7i9w12",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},"/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/index.tsx",[],"/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/reportWebVitals.ts",[],["50","51"],"/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/App.tsx",[],"/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/components/Posts/Posts.tsx",["52","53"],"import { CircularProgress, Grid } from \"@material-ui/core\";\nimport React, { FC } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { API_URL, fetchPosts } from \"../../utils/api/api-client\";\nimport { Post as IPost } from \"../../utils/types/posts\";\nimport Post from \"./Post/Post\";\nimport useStyles from \"./styles\";\n\ninterface PostsProps {\n  setCurrentId: React.Dispatch<React.SetStateAction<string | null>>;\n}\n\nexport const Posts: FC<PostsProps> = ({ setCurrentId }) => {\n  const classes = useStyles();\n  const { data: posts, status } = useQuery(\"posts\", fetchPosts);\n\n  return (\n    <>\n      {status === \"loading\" && <CircularProgress />}\n\n      {status === \"success\" && (\n        <Grid\n          className={classes.mainContainer}\n          container\n          alignItems='stretch'\n          spacing={3}\n        >\n          {posts!.map((post) => (\n            <Grid key={post._id} item xs={12} sm={6}>\n              <Post post={post} setCurrentId={setCurrentId} />\n            </Grid>\n          ))}\n        </Grid>\n      )}\n    </>\n  );\n};\n","/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/components/Form/Form.tsx",["54"],"import React, { FC, FormEvent, useEffect, useState } from \"react\";\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\n//@ts-ignore (Could not find a file declaration file for module 'react-file-base64')\nimport FileBase from \"react-file-base64\";\nimport { PostFormData } from \"../../utils/types/posts\";\nimport { useMutation, useQueryClient } from \"react-query\";\nimport useStyles from \"./styles\";\nimport { createPost, updatePost } from \"../../utils/api/api-client\";\nimport { Post as IPost } from \"../../utils/types/posts\";\n\ninterface FormProps {\n  currentId: string | null;\n  setCurrentId: React.Dispatch<React.SetStateAction<string | null>>;\n}\n\nexport const Form: FC<FormProps> = ({ currentId, setCurrentId }) => {\n  const queryClient = useQueryClient();\n  const classes = useStyles();\n  const [postData, setPostData] = useState<PostFormData>({\n    creator: \"\",\n    title: \"\",\n    message: \"\",\n    tags: [\"\"],\n    selectedFile: \"\",\n  });\n\n  const previousPosts = queryClient.getQueryData<IPost[]>(\"posts\");\n  console.log(\"DATA\", previousPosts);\n  console.log(postData.creator);\n\n  // const postToUpdate =\n  //   currentId && previousPosts\n  //     ? previousPosts.find((post) => post._id === currentId)\n  //     : null;\n\n  useEffect(() => {\n    if (currentId && previousPosts) {\n      const postToUpdate = previousPosts.find((post) => post._id === currentId);\n      if (postToUpdate)\n        setPostData({\n          creator: postToUpdate.creator,\n          title: postToUpdate.title,\n          message: postToUpdate.message,\n          tags: [...postToUpdate.tags],\n          selectedFile: postToUpdate.selectedFile,\n        });\n    }\n  }, [currentId, queryClient]);\n\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n\n    if (currentId) {\n      updatePostMutation.mutate({ id: currentId, postData: postData });\n    } else {\n      // @ts-ignore\n      createPostMutation.mutate({ ...postData });\n    }\n\n    clear();\n  };\n\n  const createPostMutation = useMutation(createPost, {\n    onSuccess: () => {\n      // Invalidate and refetch\n      queryClient.invalidateQueries(\"posts\");\n    },\n  });\n\n  const updatePostMutation = useMutation(updatePost, {\n    onSuccess: () => {\n      // Invalidate and refetch\n      queryClient.invalidateQueries(\"posts\");\n    },\n  });\n\n  const clear = () => {\n    setCurrentId(\"\");\n    setPostData({\n      creator: \"\",\n      title: \"\",\n      message: \"\",\n      tags: [\"\"],\n      selectedFile: \"\",\n    });\n  };\n  return (\n    <Paper className={classes.paper}>\n      <form\n        autoComplete='off'\n        noValidate\n        className={`${classes.root} ${classes.form}`}\n        onSubmit={handleSubmit}\n      >\n        <Typography variant='h6'>\n          {currentId ? \"Edit a Memory\" : \"Create a Memory\"}\n        </Typography>\n        <TextField\n          name='creator'\n          variant='outlined'\n          label='Creator'\n          fullWidth\n          value={postData.creator}\n          onChange={(e) =>\n            setPostData({ ...postData, creator: e.target.value })\n          }\n        />\n        <TextField\n          name='title'\n          variant='outlined'\n          label='Title'\n          fullWidth\n          value={postData.title}\n          onChange={(e) => setPostData({ ...postData, title: e.target.value })}\n        />\n        <TextField\n          name='message'\n          variant='outlined'\n          label='Message'\n          fullWidth\n          multiline\n          value={postData.message}\n          onChange={(e) =>\n            setPostData({ ...postData, message: e.target.value })\n          }\n        />\n        <TextField\n          name='tags'\n          variant='outlined'\n          label='Tags'\n          fullWidth\n          value={postData.tags}\n          onChange={(e) =>\n            setPostData({ ...postData, tags: e.target.value.split(\",\") })\n          }\n        />\n        <div className={classes.fileInput}>\n          <FileBase\n            type='file'\n            multiple={false}\n            onDone={({ base64 }: { base64: string }) =>\n              setPostData({ ...postData, selectedFile: base64 })\n            }\n          />\n        </div>\n        <Button\n          className={classes.buttonSubmit}\n          variant='contained'\n          color='primary'\n          size='large'\n          type='submit'\n          fullWidth\n        >\n          Submit\n        </Button>\n        <Button\n          variant='contained'\n          color='primary'\n          size='large'\n          type='submit'\n          fullWidth\n          onClick={clear}\n        >\n          Clear\n        </Button>\n      </form>\n    </Paper>\n  );\n};\n","/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/components/Posts/Post/Post.tsx",[],"/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/styles.ts",[],"/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/components/Form/styles.ts",[],"/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/components/Posts/Post/styles.ts",[],"/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/components/Posts/styles.ts",[],"/Users/teoliver/Documents/Web_Projects_Docs/Portifolio/book_highlight/client/src/utils/api/api-client.ts",["55"],"import { Post, PostFormData, UpdatePostData } from \"../types/posts\";\n\nexport const API_URL = \"http://localhost:5000/posts\";\n\n// export const fetchPosts = () => axios.get(url);\n// export const createPost = () => axios.post(url, newPost);\n\nexport const createPost = async (newPostData: PostFormData) => {\n  const res = await fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(newPostData),\n  }).then((res) => res.json());\n\n  return res as Post[];\n};\n\nexport const updatePost = async (post: UpdatePostData) => {\n  const res = await fetch(`${API_URL}/${post.id}`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(post.postData),\n  }).then((res) => res.json());\n\n  return res as Post;\n};\n\nexport const fetchPosts = async () => {\n  const res = await fetch(API_URL).then((res) => res.json());\n  return res as Post[];\n};\n\nexport const deletePost = async (id: string) => {\n  const res = await fetch(`${API_URL}/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n  }).then((res) => res.json());\n};\n\nexport const likePost = async (id: string) => {\n  const res = await fetch(`${API_URL}/${id}/likePost`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n  }).then((res) => res.json());\n\n  return res as Post;\n};\n",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":4,"column":10,"nodeType":"62","messageId":"63","endLine":4,"endColumn":17},{"ruleId":"60","severity":1,"message":"64","line":5,"column":18,"nodeType":"62","messageId":"63","endLine":5,"endColumn":23},{"ruleId":"65","severity":1,"message":"66","line":48,"column":6,"nodeType":"67","endLine":48,"endColumn":30,"suggestions":"68"},{"ruleId":"60","severity":1,"message":"69","line":40,"column":9,"nodeType":"62","messageId":"63","endLine":40,"endColumn":12},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"@typescript-eslint/no-unused-vars","'API_URL' is defined but never used.","Identifier","unusedVar","'IPost' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'previousPosts'. Either include it or remove the dependency array.","ArrayExpression",["72"],"'res' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},"Update the dependencies array to be: [currentId, previousPosts, queryClient]",{"range":"75","text":"76"},[1660,1684],"[currentId, previousPosts, queryClient]"]